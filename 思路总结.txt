【长度单位】
10%: 相对于父容器的对应尺寸 = 10% * 父容器的该长度
10vh: vh = view height, 视口单位，屏幕可见区域长度的10%
  （相对于屏幕，与父容器无关）
rpx: 所有设备宽度统一为750rpx
策略：父容器高度宽度分别用vh、rpx，子项用%

【布局】
justify-content ~ 主轴
align-items ~ 交叉轴

【指定位置】
疑问：相对位置和margin-左/右写法的区别？冲突后的关系？
说明：
  right:是指“右”边界向组件内部方向移动，即向左移动
第一：绝对定位（基于整个屏幕）
理解：不好用，不符合层级递进的思想
.share-button {
  position: absolute;
  left: 300rpx;
  top: 50%; /* 垂直居中 */
  transform: translate(-50%, -50%); /* 精确中心点定位 */
}
说明：
  transform: translate(-50%, -50%) 将按钮自身向左和向上移动50%尺寸，实现中心点定位
  
第二：相对定位：
.share-button {
  position: relative;
  left: 300rpx; /* 从原始位置向右偏移 */
  transform: translateX(-50%); /* 中心点修正 */
  top: 30rpx; /* 垂直位置 */
}
说明：
  left：基准点：元素的左边界
  transform: translateX(-50%)：向左移动宽度的一半

【margin和padding】
从外到内：margin-border-padding
理解：假如border是容器的边界，padding是容器边界距离里面内容的距离，margin是（容器内部的）组件距离所在容器边界的距离
注意：一般容器有默认的padding-left/right，严格指定内部组件位置大小时，需要显式设为0
基本上，容器的padding-left+内部组件的margin-left=组件到容器边界的距离

【字体】
cursive：文雅优雅风
sans-serif 或者 "Gill Sans", sans-serif：

【计算式取值】
.share-button {
  --btn-width: 200rpx;
  width: var(--btn-width);
  font-size: calc(var(--btn-width) * 0.6);
}
写法说明：
  --btn-width：用--前缀声明自定义属性（生效范围：选择器内）
  var(--btn-width)：变量引用函数，获取变量值
如何跨选择器：
  第一，全局变量
    :root, page {
      --btn-width: 200rpx; /* 全局作用域 */
    }
  第二，继承父容器：直接写，不用写其他的

【宽度可变的按钮】
  width: 200rpx !important;
  加上后面的"!important"即可
  原因：
    第一，button有微信内置的默认样式
      button {
        ...
      }
    第二，优先级规则：内联样式 > !important > ID选择器 > 类选择器 > 元素选择器
      微信默认样式当然属于元素选择器

【分享按钮】
<button open-type="share">分享</button>
  onShareAppMessage() {
    
  }
